package com.letu.healthplatform.platformmanage.sys.service.impl;import java.sql.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedList;import java.util.List;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.letu.healthplatform.platformmanage.common.code.Constants;import com.letu.healthplatform.platformmanage.common.util.Rsp;import com.letu.healthplatform.platformmanage.sys.mapper.LoginRoleMapper;import com.letu.healthplatform.platformmanage.sys.model.Login;import com.letu.healthplatform.platformmanage.sys.model.LoginRole;import com.letu.healthplatform.platformmanage.sys.service.LoginRoleService;@Servicepublic class LoginRoleServiceImpl  implements LoginRoleService {	    private static final Logger log = LogManager.getLogger(LoginRoleServiceImpl.class);    @Autowired     private LoginRoleMapper loginRoleMapper;    	@Override	public Object deleteByPrimaryKey(String tLoginId) {		int a=0;		try {			if(StringUtils.isBlank(tLoginId)){				 return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);			}		    a =loginRoleMapper.deleteByPrimaryKey(Integer.valueOf(tLoginId));			return Rsp.succ(Constants.SUCCESS_DELETE);		} catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_DELETE, e);			return Rsp.fail(Constants.ERROR_DELETE);		}	}		@Override	public Object insertSelective(LoginRole record) {		int a =0;	   if(StringUtils.isBlank(String.valueOf(record.gettLoginId()))			 &&StringUtils.isBlank(String.valueOf(record.gettRoleId()))){		   return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);	   }		try{			 //删除之前的角色			 loginRoleMapper.deleteByPrimaryKey(record.gettLoginId());			 //重新添加角色			 a = loginRoleMapper.insertSelective(record);		    return Rsp.succ(Constants.SUCCESS_INSERT);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_INSERT, e);			return Rsp.fail(Constants.ERROR_INSERT);		}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginRoleService#insertLoginRoleBatch(com.letu.healthplatform.platformmanage.sys.model.LoginRole)	 */	@Override	public Object insertLoginRoleBatch(LoginRole record) {		int a=0;		 if(StringUtils.isBlank(String.valueOf(record.gettLoginId()))				 &&StringUtils.isBlank(String.valueOf(record.gettRoleIds()))){			   return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		   }			try{				List<LoginRole>  list =new LinkedList<LoginRole>();				List<String>  alist=Arrays.asList(record.gettRoleIds().split(","));				for (int i = 0; i < alist.size(); i++) {					LoginRole  oginRole = new LoginRole();					oginRole.settLoginId(record.gettLoginId());					oginRole.settRoleId(Integer.valueOf(alist.get(i)));					list.add(oginRole);				}				 //删除之前的角色				 loginRoleMapper.deleteByPrimaryKey(record.gettLoginId());				 //重新添加角色				 a = loginRoleMapper.insertLoginRoleBatch(list);				return Rsp.succ(Constants.SUCCESS_INSERT);			}catch (Exception e) {				e.printStackTrace();				log.error(Constants.ERROR_INSERT, e);				return Rsp.fail(Constants.ERROR_INSERT);			}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginRoleService#selectByPrimaryKey(java.lang.Integer)	 */	@Override	public Object findLoginRole(String tLoginId) {		List<LoginRole>  loginRole = null;		if(StringUtils.isBlank(tLoginId)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			loginRole =loginRoleMapper.selectByPrimaryKey(Integer.valueOf(tLoginId));		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_FIND);		}		 return Rsp.succ(Constants.SUCCESS_FIND,loginRole);	}	            }