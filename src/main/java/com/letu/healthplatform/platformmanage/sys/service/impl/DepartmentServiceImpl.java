package com.letu.healthplatform.platformmanage.sys.service.impl;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.letu.healthplatform.platformmanage.common.code.Constants;import com.letu.healthplatform.platformmanage.common.util.Rsp;import com.letu.healthplatform.platformmanage.sys.mapper.DepartmentMapper;import com.letu.healthplatform.platformmanage.sys.model.Department;import com.letu.healthplatform.platformmanage.sys.service.DepartmentService;import com.letu.healthplatform.platformmanage.sys.vo.HospitalDepartment;@Service@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,timeout=36000,rollbackFor={RuntimeException.class, Exception.class})public class DepartmentServiceImpl  implements DepartmentService {	    private static final Logger log = LogManager.getLogger(DepartmentServiceImpl.class);    @Autowired     private DepartmentMapper departmentMapper;	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#findDepartmentPage(com.letu.healthplatform.platformmanage.sys.model.Department)	 */	@Override	public Object findDepartmentPage(HospitalDepartment dept,int page,int pageSize) {		List<HospitalDepartment> list=null;		try{			if(page>0&&pageSize>0)		    PageHelper.startPage(page, pageSize);		    list=departmentMapper.selectByParam(dept);		    if(page>0&&pageSize>0){		    	 return new PageInfo<>(list);		    }		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);		}		return Rsp.succ(Constants.SUCCESS_FIND, list);	}		/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#findDepartment(java.lang.String)	 */	@Override	public Object findDepartment(String tId) {		Department  dept = null;		if(StringUtils.isBlank(tId)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			dept =departmentMapper.selectByPrimaryKey(Integer.valueOf(tId));		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_DELETE);		}		return Rsp.succ(Constants.SUCCESS_FIND,dept);	}		/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#deleteByPrimaryKey(java.lang.String)	 */	@Override	public Object deleteByPrimaryKey(String tIds) {		if(StringUtils.isBlank(tIds)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			int a = departmentMapper.deleteByPrimaryKey(tIds.split(","));			return Rsp.succ(Constants.SUCCESS_DELETE);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_DELETE, e);			return Rsp.succ(Constants.ERROR_DELETE);		}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#insertSelective(com.letu.healthplatform.platformmanage.sys.model.Department)	 */	@Override	public Object insertSelective(Department record) {		try{			int a = departmentMapper.insertSelective(record);			if(a>0) return Rsp.succ(Constants.SUCCESS_INSERT);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_INSERT, e);		}		return Rsp.fail(Constants.ERROR_INSERT);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#updateByPrimaryKeySelective(com.letu.healthplatform.platformmanage.sys.model.Department)	 */	@Override	public Object updateByPrimaryKeySelective(Department record) {		int a =0;		try{			 a = departmentMapper.updateByPrimaryKeySelective(record);		}catch (Exception e) {		    e.printStackTrace();		    log.error(Constants.ERROR_UPDATE,e);		    return Rsp.fail(Constants.ERROR_UPDATE);		}		return Rsp.succ(Constants.SUCCESS_UPDATE);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.DepartmentService#updateByStatus(java.lang.String, java.lang.String)	 */	@Override	public Object updateByStatus(String tStatus, String tIds) {		int a =0;		Map<String, Object> params =new HashMap<String, Object>();		try {			params.put("tStatus", tStatus);			List<String> list = Arrays.asList(tIds.split(","));			params.put("list", list);			a = departmentMapper.updateByStatus(params);			return Rsp.succ(Constants.SUCCESS_UPDATE);		}catch (Exception e) {		    e.printStackTrace();		    log.error(Constants.ERROR_UPDATE,e);		    return Rsp.fail(Constants.ERROR_UPDATE);		}	}}