package com.letu.healthplatform.platformmanage.sys.service.impl;import java.util.List;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.letu.healthplatform.platformmanage.common.code.Constants;import com.letu.healthplatform.platformmanage.common.util.Rsp;import com.letu.healthplatform.platformmanage.sys.mapper.AuthorityMapper;import com.letu.healthplatform.platformmanage.sys.model.Authority;import com.letu.healthplatform.platformmanage.sys.service.AuthorityService;@Servicepublic class AuthorityServiceImpl  implements AuthorityService {    private static final Logger log = LogManager.getLogger(AuthorityServiceImpl.class);    @Autowired     private AuthorityMapper authorityMapper;	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.AuthorityService#findAuthorityPage(com.letu.healthplatform.platformmanage.sys.model.Authority, int, int)	 */	@Override	public Object findAuthorityPage(Authority record, int page, int pageSize) {		 List<Authority> list=null;			try{				if(page>0&&pageSize>0)			    PageHelper.startPage(page, pageSize);			    list=authorityMapper.selectByParam(record);			    if(page>0&&pageSize>0){			    	 return new PageInfo<>(list);			    }			}catch (Exception e) {				e.printStackTrace();				log.error(Constants.ERROR_FIND, e);				return Rsp.fail(Constants.ERROR_FIND);			}			return Rsp.succ(Constants.SUCCESS_FIND, list);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.AuthorityService#deleteByPrimaryKey(java.lang.String)	 */	@Override	public Object deleteByPrimaryKey(String tIds) {		if(StringUtils.isBlank(tIds)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			int a = authorityMapper.deleteByPrimaryKey(tIds.split(","));			return Rsp.succ(Constants.SUCCESS_DELETE);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_DELETE, e);			return Rsp.fail(Constants.ERROR_DELETE);		}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.AuthorityService#insertSelective(com.letu.healthplatform.platformmanage.sys.model.Authority)	 */	@Override	public Object insertSelective(Authority record) {		try{			int a = authorityMapper.insertSelective(record);		 return Rsp.succ(Constants.SUCCESS_INSERT);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_INSERT, e);			return Rsp.fail(Constants.ERROR_INSERT);		}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.AuthorityService#findAuthority(java.lang.String)	 */	@Override	public Object findAuthority(String tId) {		Authority  hs = null;		if(StringUtils.isBlank(tId)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			hs =authorityMapper.selectByPrimaryKey(Integer.valueOf(tId));		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_FIND);		}		return Rsp.succ(Constants.SUCCESS_FIND,hs);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.AuthorityService#updateByPrimaryKeySelective(com.letu.healthplatform.platformmanage.sys.model.Authority)	 */	@Override	public Object updateByPrimaryKeySelective(Authority record) {		int a =0;		try{			 a = authorityMapper.updateByPrimaryKeySelective(record);		}catch (Exception e) {		    e.printStackTrace();		    log.error(Constants.ERROR_UPDATE,e);		    return Rsp.fail(Constants.ERROR_UPDATE);		}		 return Rsp.succ(Constants.SUCCESS_UPDATE);	}}