package com.letu.healthplatform.platformmanage.sys.service.impl;import java.util.Arrays;import java.util.LinkedList;import java.util.List;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.letu.healthplatform.platformmanage.common.code.Constants;import com.letu.healthplatform.platformmanage.common.util.Rsp;import com.letu.healthplatform.platformmanage.sys.mapper.RoleMenuMapper;import com.letu.healthplatform.platformmanage.sys.model.LoginRole;import com.letu.healthplatform.platformmanage.sys.model.RoleMenu;import com.letu.healthplatform.platformmanage.sys.service.RoleMenuService;@Servicepublic class RoleMenuServiceImpl  implements RoleMenuService {	    private static final Logger log = LogManager.getLogger(RoleMenuServiceImpl.class);    @Autowired     private RoleMenuMapper roleMenuMapper;	@Override	public Object deleteByPrimaryKey(String tRoleId) {				try {			if(StringUtils.isBlank(tRoleId)){				 return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);			}			int a =roleMenuMapper.deleteByPrimaryKey(Integer.valueOf(tRoleId));			 return Rsp.succ(Constants.SUCCESS_DELETE);		} catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_DELETE, e);			return Rsp.fail(Constants.ERROR_DELETE);		}			}	@Override	public Object insertSelective(RoleMenu record) {		int a =0;			try{				if(StringUtils.isBlank(String.valueOf(record.gettRoleId()))){					   return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);				   }				 //删除之前的权限资源				roleMenuMapper.deleteByPrimaryKey(record.gettRoleId());				 //重新添加权限资源				 a = roleMenuMapper.insertSelective(record);			}catch (Exception e) {				e.printStackTrace();				log.error(Constants.ERROR_INSERT, e);				Rsp.fail(Constants.ERROR_INSERT);			}			 return Rsp.succ(Constants.SUCCESS_INSERT);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.RoleMenuService#insertRoleMenuBatch(java.util.List)	 */	@Override	public Object insertRoleMenuBatch(RoleMenu record) {		int a=0;		 	if(StringUtils.isBlank(String.valueOf(record.gettRoleId()))				 &&StringUtils.isBlank(String.valueOf(record.gettMenuIds()))){			   return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		    }			try{				List<RoleMenu>  list =new LinkedList<RoleMenu>();				List<String>  alist=Arrays.asList(record.gettMenuIds().split(","));				for (int i = 0; i < alist.size(); i++) {					RoleMenu  roleMenu = new RoleMenu();					roleMenu.settRoleId(record.gettRoleId());					roleMenu.settMenuId(Integer.valueOf(alist.get(i)));					list.add(roleMenu);				}				 //删除之前的角色				roleMenuMapper.deleteByPrimaryKey(record.gettRoleId());				 //重新添加角色				 a = roleMenuMapper.insertRoleMenuBatch(list);			}catch (Exception e) {				e.printStackTrace();				log.error(Constants.ERROR_INSERT, e);				Rsp.fail(Constants.ERROR_INSERT);			}			return Rsp.succ(Constants.SUCCESS_INSERT);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.RoleMenuService#findRoleMenu(java.lang.String)	 */	@Override	public Object findRoleMenu(String tRoleId) {		List<RoleMenu>  roleMenu = null;		if(StringUtils.isBlank(tRoleId)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			roleMenu =roleMenuMapper.selectByPrimaryKey(Integer.valueOf(tRoleId));			return Rsp.succ(Constants.SUCCESS_FIND,roleMenu);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_FIND);		}	}    }