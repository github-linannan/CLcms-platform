package com.letu.healthplatform.platformmanage.sys.service.impl;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.alibaba.fastjson.JSONObject;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.letu.healthplatform.platformmanage.common.code.Constants;import com.letu.healthplatform.platformmanage.common.config.RedisSetUtil;import com.letu.healthplatform.platformmanage.common.config.RedisUntil;import com.letu.healthplatform.platformmanage.common.util.MD5;import com.letu.healthplatform.platformmanage.common.util.RandomUtil;import com.letu.healthplatform.platformmanage.common.util.Rsp;import com.letu.healthplatform.platformmanage.sys.mapper.InviteMapper;import com.letu.healthplatform.platformmanage.sys.mapper.LoginMapper;import com.letu.healthplatform.platformmanage.sys.model.Invite;import com.letu.healthplatform.platformmanage.sys.model.Login;import com.letu.healthplatform.platformmanage.sys.service.LoginService;@Service@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,timeout=36000,rollbackFor={RuntimeException.class, Exception.class})public class LoginServiceImpl  implements LoginService {	    private static final Logger log = LogManager.getLogger(LoginServiceImpl.class);    @Autowired     private LoginMapper loginMapper;        @Autowired    private RedisSetUtil  redisSetUtil;    @Autowired    private RedisUntil  redisUtil;            @Autowired    private InviteMapper inviteMapper;    	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#findLoginPage(com.letu.healthplatform.platformmanage.sys.model.Login, int, int)	 */	@Override	public Object findLoginPage(Login login, int page, int pageSize) {		List<Login> list=null;		try{			if(page>0&&pageSize>0)		    PageHelper.startPage(page, pageSize);		    list=loginMapper.selectByParam(login);		    if(page>0&&pageSize>0){		    	 return new PageInfo<>(list);		    }		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_FIND);		}		return Rsp.succ(Constants.SUCCESS_FIND, list);	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#deleteByPrimaryKey(java.lang.String)	 */	@Override	public Object deleteByPrimaryKey(String tIds) {		int a=0;		if(StringUtils.isBlank(tIds)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			 a = loginMapper.deleteByPrimaryKey(tIds.split(","));			return Rsp.succ(Constants.SUCCESS_DELETE);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_DELETE, e);			return Rsp.fail(Constants.ERROR_DELETE);		}	}		/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#findLogin(java.lang.String)	 */	@Override	public Object findLogin(String tId) {		Login  login = null;		if(StringUtils.isBlank(tId)){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			login =loginMapper.selectByPrimaryKey(Integer.valueOf(tId));			 return Rsp.succ(Constants.SUCCESS_FIND,login);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);			return Rsp.fail(Constants.ERROR_FIND);		}	}		/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#findLoginDirector(com.letu.healthplatform.platformmanage.sys.model.Login)	 */	@Override	public Object findLoginDirector(Login record) {		Login  login = null;		if(StringUtils.isBlank(String.valueOf(record.gettHospitalId()))&&				StringUtils.isBlank(String.valueOf(record.gettDepartmentId()))){			return Rsp.fail(Constants.DEFAULT_KEY_ISNULL);		}		try{			login =loginMapper.selectByLoginDirector(record);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_FIND, e);		}		return Rsp.succ(Constants.SUCCESS_FIND,login);	}    		/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#insertSelective(com.letu.healthplatform.platformmanage.sys.model.Login)	 */	@Override	public Object insertSelective(Login record) {		int a=0;		//TODO  		try{			//先生成一个随机数			String number = RandomUtil.getInvite();			//判断随机数是否存在  存在继续生成			if(redisSetUtil.isMembers(number)){				number = getNumber(number);			}else{//不存现在				//redis保存				if(redisSetUtil.set(redisSetUtil.INVITE_PREFIX, number))				{					//保存到数据库					int b =inviteMapper.insertSelective(new Invite(number));					if(b>0){						//生成六位的不重复的随机数						record.settInvite(number);						//保存用户信息						record.settPassword(MD5.encryptPassword(record.gettPassword()));						a =loginMapper.insertSelective(record);						if(a>0){							//如果是主任   更新科室下人员主任的编码							if(record.gettUserType()==2&&record.gettDirector()==1){								Map<String, Object> params =new HashMap<String, Object>();								params.put("tHospitalId", record.gettHospitalId());//医院								params.put("tDepartmentId", record.gettDepartmentId());//科室								params.put("tDirector", 0);//不是主任标记								params.put("tDirectorId",record.gettId());								loginMapper.updateDirector(params);								return Rsp.succ(Constants.SUCCESS_INSERT);							 }						}					}					 				};			}			return Rsp.succ(Constants.SUCCESS_INSERT);		}catch (Exception e) {			e.printStackTrace();			log.error(Constants.ERROR_INSERT, e);			return Rsp.fail(Constants.ERROR_INSERT);		}	}			/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#updateByPrimaryKeySelective(com.letu.healthplatform.platformmanage.sys.model.Login)	 */	@Override	public Object updateByPrimaryKeySelective(Login record) {				try{						if(record!=null&&!"".equals(record.gettPassword())&&record.gettPassword().length()!=32){				record.settPassword(MD5.encryptPassword(record.gettPassword()));			}			loginMapper.updateByPrimaryKeySelective(record);			//是医生			if("2".equals(record.gettUserType())){				Map<String, Object> params =new HashMap<String, Object>();				params.put("tHospitalId", record.gettHospitalId());//医院				params.put("tDepartmentId", record.gettDepartmentId());//科室				params.put("tDirector", 0);//不是主任标记				//查处用户之前的信息				Login login=loginMapper.selectByPrimaryKey(record.gettId());				if(!StringUtils.contains(String.valueOf(record.gettDirector())						,String.valueOf(login.gettDirector()))){					//之前是主任					if(login.gettDirector()==1){							params.put("tDirectorId",null);//清空之前主任编号					}else{//不是主任							params.put("tDirectorId",record.gettId());//更新主任编号					}				}				//更新状态				loginMapper.updateDirector(params);			}			return Rsp.succ(Constants.SUCCESS_UPDATE);		}catch (Exception e) {		    e.printStackTrace();		    log.error(Constants.ERROR_UPDATE,e);		    return Rsp.fail(Constants.ERROR_UPDATE);		}	}	/* (non-Javadoc)	 * @see com.letu.healthplatform.platformmanage.sys.service.LoginService#updateByStatus(java.lang.String, java.lang.String)	 */	@Override	public Object updateByStatus(String tStatus, String tIds) {		int a =0;		Map<String, Object> params =new HashMap<String, Object>();		try {			params.put("tStatus", tStatus);			List<String> list = Arrays.asList(tIds.split(","));			params.put("list", list);			 a = loginMapper.updateByStatus(params);			 return Rsp.succ(Constants.SUCCESS_UPDATE);		}catch (Exception e) {		    e.printStackTrace();		    log.error(Constants.ERROR_UPDATE,e);		    return Rsp.fail(Constants.ERROR_UPDATE);		}	}    	/***	 * @param  number  随机数	 * @retrun  返回随机数	 * */	public   String getNumber(String number){		//如果随机生成的存在		if(redisSetUtil.isMembers(number)){			return 	getNumber(RandomUtil.getInvite());		}		return number;	}			@Override	public Object findLoginByName(Login record) {		Login newRecord=new Login();		newRecord.settLoginName(record.gettLoginName());		Login model=loginMapper.selectByModel(newRecord);		if(model!=null){			String inputPwd=MD5.encryptPassword(record.gettPassword());			if(inputPwd.equals(model.gettPassword())){		     String token=MD5.encryptSign(UUID.randomUUID().toString());		       redisUtil.cacheValue(token, JSONObject.toJSONString(model));		       return Rsp.succ("登录成功",token);			}		}		return Rsp.fail("登录失败");	}		@Override	public Object findLoginName(Login record) {		Login model=loginMapper.selectByModel(record);		if(model!=null){		       return Rsp.succ("用户已存在");		}		return Rsp.fail("用户不存在");	}	@Override	public Object updatePasswordByPrimaryKeySelective(Login record) {		if(record!=null&&record.gettPassword()!=null){			Login login=new Login();			login.settId(record.gettId());			login.settPassword(MD5.encryptPassword(record.gettPassword()));			int i=loginMapper.updateByPrimaryKeySelective(login);			if(i>0){			      return Rsp.succ("修改密码成功");			}else{				  return Rsp.succ("修改密码失败");			}		}		return Rsp.fail("输入密码为空");			}		}